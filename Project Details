# Translation-Day-Contest



_**Model Script (model.py)**_

This script contains the core functions for translation evaluation:

_Language Detection:_ Uses langdetect to identify the language of the input text.

_Translation:_ Integrates with Azure Cognitive Translator API to translate the text in both directions (source to target and target back to source).

_Metrics Calculation:_
-- Cosine Similarity: Measures semantic similarity using SpaCy and BERT embeddings.
-- BLEU Score: Evaluates the precision of word n-grams.
-- ROUGE Score: Measures overlaps of n-grams and sequences.
-- METEOR Score: Incorporates precision, recall, and alignment for scoring.
-- Levenshtein Distance: Measures the edit distance between texts.
-- BERT-Based Similarity: Compares semantic embeddings generated by BERT.
-- Quality Scoring: Aggregates metrics to assign a quality score on a scale from 1 to 5.


_**Flask Backend (app.py)**_

_Core Functionality:_

The generate_translation_evaluation function in model.py performs the main task of evaluating the quality of human translations by comparing them with Azure-translated texts.
Various evaluation metrics, such as BLEU, ROUGE, METEOR, and BERT-based cosine similarity, are calculated to assess the quality of translations.

_API Endpoints:_

-- Root Endpoint (/):
Renders the index.html page, which acts as the main user interface for the application.

-- Predict Endpoint (/predict):
This endpoint processes user-submitted text.
It accepts JSON data containing the source text and the human translation.
The backend then evaluates the translation and returns a JSON response with the evaluation results, including scores for each metric and an overall quality rating.

_Error Handling:_

Any exceptions that occur during the process are caught and returned to the client as an error message with a 500 HTTP status code.

_CORS Support:_

The flask_cors library ensures that the frontend can make requests to the backend from different origins during development or deployment.

_How the Backend Communicates with the Model_
The model.py file is imported into the Flask app. The functions like azure_translate and calculate_metrics are used directly within the Flask endpoints.
The backend uses the Azure Translator API for machine translation and evaluates translations using various NLP metrics.


_**Frontend (index.html)**_

The frontend serves as the interface where users can interact with the application. Itâ€™s implemented in HTML and styled with CSS to create an interactive, responsive design.

**Structure of the Frontend**

_Navbar:_

-- A navigation bar at the top of the page provides branding or links to additional features if added.
-- Styled with CSS for hover effects and alignment.

_Main Content Area:_

-- The content is centered and presented in a card-like layout for a clean and professional appearance.
-- Input Fields:
   Users provide the source text and the human translation through input boxes.
-- Submit Button:
   A button sends the entered data to the backend for evaluation.
   
_Styling:_

-- The design uses the Poppins font for a modern look.
-- The .container class styles the form area, including transitions for hover effects.
-- Input fields have focus effects that highlight them with a blue border when active.

_Dynamic Interaction with Flask Backend:_

-- The frontend uses JavaScript (not included in your provided files) or the form submission mechanism to send data to the /predict endpoint via an HTTP POST request.
-- The server's response is typically handled by JavaScript to dynamically update the webpage with evaluation results, or the page can refresh with a new response.


_**User Flow**_

-- A user enters a source text and its human translation into the provided input boxes and clicks the submit button.
-- The data is sent to Flask's /predict endpoint as a JSON payload.
-- The backend processes the request, evaluates the translation, and sends the evaluation metrics back as a JSON response.
-- The frontend can then display the results dynamically, either on the same page or a results page.
